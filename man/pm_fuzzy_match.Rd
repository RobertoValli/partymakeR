% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pm_fuzzy_match.R
\name{pm_fuzzy_match}
\alias{pm_fuzzy_match}
\title{Get fuzzy party name matches}
\usage{
pm_fuzzy_match(survey_data, meta_data, by, method = "osa", threshold = 5, ...)
}
\arguments{
\item{survey_data}{A dataframe or similar object with unique party names in survey or poll data}

\item{meta_data}{A dataframe or similar object with unique party names in reference party-level dataset (e.g., ParlGov)}

\item{by}{Expression that defines the variables to be matched in the two dataset, e.g.
c("name_party_survey" = "name_party_meta)}

\item{method}{One of stringdist matching methods ("osa", "lv", "dl", "hamming", "lcs", "qgram", "cosine", "jaccard", "jw", "soundex")}

\item{threshold}{Maximum distance value to be kept}

\item{...}{Additional parameters to pass to \code{fuzzyjoin::stringdist_left_join} and \code{stringdist::stringdist}}
}
\value{
A dataframe of matched strings that respect the distance threshold.
}
\description{
This function is a helper to match party names in new data to a
"meta dataset" of other party names using a distance metric. It output is a
dataframe that can be checked and manually adjusted.
}
\examples{
# Load package
library(partymakeR)

# Create example datasets
dat_survey <- data.frame(
  party_names = c("Big party", "Nationals' assembly", "Loser party"),
  party_id = 1:3)
dat_meta <- data.frame(
  name_party = c("big parties", "Nationalist party", "losers"),
  id_party = letters[1:3])

# Compute match (1 result)
pm_fuzzy_match(survey_data = dat_survey, meta_data = dat_meta,
               c("party_names" = "name_party"), threshold = 5)

# Compute match (6 results)
pm_fuzzy_match(survey_data = dat_survey, meta_data = dat_meta,
               c("party_names" = "name_party"), threshold = 12)
}
